#!/usr/bin/python
# -*- coding: UTF-8 -*-

import copy
import re
from collections import Counter, OrderedDict

import nltk
import numpy as np
from nltk.stem import SnowballStemmer
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import TreebankWordTokenizer
from pymorphy2 import MorphAnalyzer
from pymystem3 import Mystem

if __name__ == '__main__':

    nltk.download('stopwords', quiet=True)
    nltk.download('omw-1.4', quiet=True)
    nltk.download('wordnet')

    # The goal of this course work is to make topic modelling for Russian scientific articles using TF-IDF vectorizing
    # Text Corpus was taken from:
    # https://cyberleninka.ru/article/c/history-and-archaeology/4
    # https://cyberleninka.ru/article/c/basic-medicine

    filePath0 = "C:\\Users\\DVatlin\\PycharmProjects\\NLP\\resources\\data\\archeology0.txt"
    filePath1 = "C:\\Users\\DVatlin\\PycharmProjects\\NLP\\resources\\data\\archeology1.txt"
    filePath2 = "C:\\Users\\DVatlin\\PycharmProjects\\NLP\\resources\\data\\archeology2.txt"
    filePath3 = "C:\\Users\\DVatlin\\PycharmProjects\\NLP\\resources\\data\\archeology3.txt"
    filePath4 = "C:\\Users\\DVatlin\\PycharmProjects\\NLP\\resources\\data\\geology1.txt"
    filePath5 = "C:\\Users\\DVatlin\\PycharmProjects\\NLP\\resources\\data\\medicine1.txt"
    filePath6 = "C:\\Users\\DVatlin\\PycharmProjects\\NLP\\resources\\data\\medicine2.txt"
    filePath7 = "C:\\Users\\DVatlin\\PycharmProjects\\NLP\\resources\\data\\history1.txt"

    paths = [filePath0, filePath1, filePath2, filePath3, filePath4, filePath5, filePath6, filePath7]

    def getSentence(filepath):
        with open(filepath, encoding='utf-8') as dataFile:
            file = dataFile.readlines()
        sentence = ""
        for line in file:
            sentence += line.lower()
        return sentence


    def tokenazing(sentence, stopwords, puncs, pattern):
        tokenizer = TreebankWordTokenizer()
        tokens = tokenizer.tokenize(sentence)

        tokens = ["".join(token.split("-")) for token in tokens if
                  token not in stopwords and
                  token not in puncs and
                  len(token) > 2 and
                  not re.match(pattern, token)
                  ]

        for token in tokens:
            if (token.startswith("«") and token.endswith("»")) or (token.startswith("'") and token.endswith("'")) or (
                    token.startswith('"') and token.endswith('"')) or (token.startswith("“") and token.endswith("“")):
                tokens.remove(token)
                tokens.append(token[1:len(token) - 1])
            elif token.startswith("«") or token.startswith("'") or token.startswith('"') or token.startswith("“"):
                tokens.remove(token)
                tokens.append(token[1:len(token)])
            elif token.endswith("»") or token.endswith("'") or token.endswith('"') or token.endswith("“"):
                tokens.remove(token)
                tokens.append(token[:len(token) - 1])
            elif token.endswith("."):
                tokens.remove(token)
                tokens.append(token[:len(token) - 1])

        return ' '.join(tokens)


    def stemmer(sentence):
        return SnowballStemmer(language="russian").stem(sentence)


    def lemmatizer1(sentence):
        return WordNetLemmatizer().lemmatize(sentence)


    def lemmatizer2(sentence):
        morph = MorphAnalyzer()
        lemmas = [morph.normal_forms(token)[0] for token in sentence.split()]
        return ' '.join(lemmas)


    def lemmatizer3(sentence):
        m = Mystem()
        lemmas = m.lemmatize(sentence)
        return ''.join(lemmas)


    def getBagOfWords(sentence):
        return Counter(sentence.split())


    def getDocumentTfIdfVectors(bagOfWords, lexicon):
        zero_vector = OrderedDict((token, 0) for token in lexicon) # to make common vector space for every vector in lexicon
        vec = copy.copy(zero_vector) # So we are dealing with new objects, not multiple references to the same object
        for key, value in bagOfWords.items():
            docs_containing_key = 0
            for _doc in docs_tokens:
                if key in _doc:
                    docs_containing_key += 1
            if docs_containing_key == 0:  # We didn't find that token in the lexicon go to next key
                continue
            tf = value / len(lexicon)
            idf = len(docs_tokens) / docs_containing_key
            vec[key] = tf * idf
        return vec


    def getCorpusTfIdfVectors(docs_tokens, lexicon):
        zero_vector = OrderedDict((token, 0) for token in lexicon)  # to make common vector space for every vector in lexicon
        document_tfidf_vectors = []

        for tokens in docs_tokens:
            vec = copy.copy(
                zero_vector)  # So we are dealing with new objects, not multiple references to the same object
            tokens_counts = Counter(tokens)

            for key, value in tokens_counts.items():
                docs_containing_key = 0
                for _doc in docs_tokens:
                    if key in _doc:
                        docs_containing_key += 1
                tf = value / len(lexicon)
                if docs_containing_key:
                    idf = len(docs_tokens) / docs_containing_key
                else:
                    idf = 0
                vec[key] = tf * idf
            document_tfidf_vectors.append(vec)
        return document_tfidf_vectors


    def compareTfIdfVectors(doctfIdfVec1, doctfIdfVec2):
        # calculate Cosine similarity (Otiai coefficient) between 2 vectors
        vec1 = np.array(list(doctfIdfVec1.values()))
        vec2 = np.array(list(doctfIdfVec2.values()))
        return vec1.dot(vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))


    def pipelineTokenizer(filePath, stopwords, puncs, pattern):
        sentence = lemmatizer3(stemmer(tokenazing(getSentence(filePath), stopwords, puncs, pattern)))
        tokens = sentence.split()
        return sentence, tokens, getBagOfWords(sentence)

    stopwords = nltk.corpus.stopwords.words('russian')
    puncs = {',', '.', '--', '-', '!', '?', ':', ';', '``', "''", '(', ')', '[', ']', '//'}
    pattern = r'[-+]*\d+,\d+|\d+|\d+\/\d+|«[\w+\s]»|\.\.\.|[A-Za-z]|^\ufeff|[а-яА-Я]\.[а-яА-Я]'

    # tokenizing pipeline
    pipeline = []

    for filepath in paths:
        pipeline.append(pipelineTokenizer(filepath, stopwords, puncs, pattern))

    # Look at the bag of words for different documents:
    sentenceArch0, tokensArch0, bagOfWordsArch0 = pipeline[0]
    print(bagOfWordsArch0.most_common(20))
    # [('жилище', 100), ('супесь', 40), ('заполнение', 31), ('сосуд', 31), ('поселение', 29), ('кашинский', 29), ('культура', 25), ('фрагмент', 25), ('часть', 24), ('пол', 23), ('муллашинский', 20), ('керамика', 20), ('юрта', 19), ('уровень', 19), ('слой', 18), ('глубина', 17), ('обнаруживать', 17), ('также', 17), ('саргатский', 16), ('раскоп', 16)]

    sentenceArch1, tokensArch1, bagOfWordsArch1 = pipeline[1]
    print(bagOfWordsArch1.most_common(20))
    # [('рис', 36), ('украшение', 29), ('погребение', 29), ('киняминский', 29), ('погр', 24), ('левый', 21), ('сторона', 20), ('накосный', 18), ('подвеска', 18), ('могильник', 17), ('находить', 17), ('кость', 16), ('пронизь', 13), ('сустав', 12), ('погр.', 12), ('коса', 12), ('правый', 11), ('женщина', 11), ('шуметь', 11), ('уровень', 11)]

    sentenceArch2, tokensArch2, bagOfWordsArch2 = pipeline[2]
    print(bagOfWordsArch2.most_common(20))
    # [('ямный', 80), ('население', 62), ('культура', 62), ('одонтологический', 61), ('серия', 56), ('калмыкия', 36), ('частота', 36), ('тип', 35), ('моляр', 35), ('признак', 32), ('украина', 27), ('первый', 27), ('фактор', 25), ('второй', 24), ('нижний', 23), ('правый', 21), ('левый', 21), ('высокий', 19), ('состав', 18), ('гуйюк', 18)]

    sentenceArch3, tokensArch3, bagOfWordsArch3 = pipeline[3]
    print(bagOfWordsArch3.most_common(20))
    # [('черкаскульский', 21), ('памятник', 14), ('культура', 11), ('поселение', 11), ('эпоха', 11), ('бронза', 10), ('сибирь', 9), ('группа', 8), ('хозяйство', 8), ('ольховка', 8), ('археологический', 8), ('федоровский', 8), ('урал', 8), ('наука', 8), ('унт', 8), ('население', 7), ('матвеев', 7), ('данный', 7), ('остаток', 7), ('хронология', 7)]

    sentenceGeo0, tokensGeo0, bagOfWordsGeo1 = pipeline[4]
    print(bagOfWordsGeo1.most_common(20))
    # [('порода', 23), ('горный', 18), ('обломочный', 9), ('обломок', 8), ('образовываться', 7), ('конгломерат', 6), ('тульский', 5), ('государственный', 5), ('университет', 5), ('тула', 5), ('брекчия', 5), ('песчаник', 5), ('наука', 5), ('результат', 4), ('размер', 4), ('известие', 4), ('технический', 4), ('издво', 4), ('тулга', 4), ('вып', 4)]

    sentenceMed1, tokensMed1, bagOfWordsMed1 = pipeline[5]
    print(bagOfWordsMed1.most_common(20))
    # [('больной', 7), ('хорионкарцинома', 7), ('лечение', 6), ('содержание', 6), ('кровь', 6), ('уровень', 6), ('раз', 6), ('матка', 5), ('агхт', 5), ('моча', 5), ('система', 4), ('результат', 4), ('метод', 4), ('нарушение', 4), ('изменение', 3), ('функция', 3), ('гипофизгонадный', 3), ('влияние', 3), ('аутогемохимиотерапия', 3), ('гормон', 3)]

    sentenceMed2, tokensMed2, bagOfWordsMed2 = pipeline[6]
    print(bagOfWordsMed2.most_common(20))
    # [('мягкий', 37), ('иммобилизация', 31), ('тиреоидин', 31), ('крыса', 26), ('коэффициент', 25), ('сравнение', 22), ('омн', 21), ('омс', 21), ('сож', 21), ('воздействие', 20), ('препарат', 20), ('животное', 19), ('жесткий', 19), ('стресс', 18), ('селезенка/надпочечник', 17), ('надпочечник', 15), ('раз', 15), ('фон', 14), ('масса', 13), ('поражение', 13)]

    sentenceHist1, tokensHist1, bagOfWordsHist1 = pipeline[7]
    print(bagOfWordsHist1.most_common(20))
    # [('фиванец', 103), ('афинянин', 89), ('война', 80), ('беотийский', 79), ('беотия', 68), ('фивы', 60), ('мочь', 54), ('союз', 53), ('платея', 52), ('который', 50), ('аттик', 45), ('афины', 43), ('пелопоннесский', 42), ('битва', 42), ('гоплит', 41), ('политика', 40), ('данный', 38), ('афинский', 38), ('см', 36), ('фиванский', 30)]

    # Vectorizing
    # Making lexicon
    docs_tokens = [tokensArch1, tokensArch2, tokensArch3]
    all_tokens = sum(docs_tokens, [])
    lexicon = sorted(set(all_tokens))
    print(lexicon)
    # ['+5м1', 'çаталhöыϋк', 'абла', 'абсолютно', 'автор', 'автореф', 'адам', 'адаптационный', 'азия', 'академия', 'аксянов', 'алта', 'алтындеп', 'анализ', 'аналог', 'аналогичный', 'анатолий', 'андроновский', 'андроноидный”', 'андрон”', 'ансамбль', 'антимер', 'античный', 'антропологический', 'антропология', 'антропология.', 'антропофенетика', 'аргумент', 'ареал', 'армянский', 'артефакт', 'архаизм', 'архаический', 'архар', 'архаринский', 'археологический', 'археология', 'археометаллургия', 'архетип', 'арьян', 'асикать', 'асимметричный', 'асимметрия', 'аспект', 'астраханский', 'атрибуция', 'ашикать', 'база', 'базироваться', 'балл', 'баночный', 'бараба', 'барнаул', 'башк', 'бедренный', 'бедро', 'бежтинский', 'берег', 'бесспорно', 'бечевка', 'библиографический', 'биологический', 'бисер', 'бисерный', 'благодарность', 'близкий', 'близко', 'близость', 'бляшка', 'бобковский', 'богатый', 'божественный', 'бок', 'больший', 'большинство', 'большой', 'брахикраний', 'брахикрания', 'брахикранность', 'брахикранный', 'бронза', 'бронзовый', 'бугорков', 'бугорок', 'бусина', 'бусинапронизь', 'бусы', 'бывать', 'бытовать', 'быть', 'важность', 'важный', 'ван', 'вар', 'вариант', 'варова', 'васильевка', 'васюган', 'васюганье', 'вв', 'вверху', 'вводить', 'вдоль', 'ведущий', 'век', 'великорусский', 'веревочка', 'вероятность', 'вероятный', 'версия', 'верхний', 'вес', 'вестна', 'вестник', 'весь', 'весьма', 'взаимный', 'взгляд', 'вздутие', 'взрослый', 'вид', 'видимо', 'видно', 'височный', 'включать', 'включаться', 'включая', 'влияние', 'вместе', 'внешний', 'вовлекать', 'вовторых', 'водный', 'возводить', 'воздействие', 'воззрение', 'возле', 'возможно', 'возможность', 'возможный', 'возраст', 'возрастной', 'волос', 'вопервый', 'вопервых', 'вопрос', 'восемь', 'восстановление', 'вост.', 'восток', 'восточноевропейский', 'восточнославянский', 'восточный', 'вперед', 'вплетать', 'вплоть', 'вполне', 'время', 'вряд', 'вскармливание', 'вследствие', 'вспомогательный', 'встречаемость', 'встречать', 'встречаться', 'второй', 'втретьих', 'входить', 'вхождение', 'выборка', 'вывод', 'выделение', 'выделять', 'выделяться', 'вызывать', 'вып', 'выполнять', 'выражать', 'выраженный', 'высокий', 'выступание', 'выступать', 'выходить', 'выше', 'выявляться', 'гамзатов', 'гамзатова', 'гг', 'гельдыев', 'генетикоавтоматический', 'генетический', 'геногеография', 'географически', 'геометрический', 'герасимов', 'гетерогенность', 'гиподонтия', 'гипоконус', 'гипотеза', 'главный', 'глина', 'глубокий', 'говорить', 'говориться', 'год', 'голова', 'головнев', 'головной', 'голоцен', 'гончаров', 'горизонтальный', 'горшок', 'государственный', 'гравер', 'градиент', 'грант', 'график', 'грацилизация', 'грацилизировать', 'грацильный', 'гребенчатый', 'гребень', 'громадный', 'грудиплечи', 'грудной', 'грудь', 'группа', 'группировка', 'гуйюк', 'давать', 'дагестан', 'далее', 'даль', 'дальний', 'данные', 'данный', 'данных1', 'дата', 'датирование', 'датировать', 'датироваться', 'датировка', 'два', 'двойной', 'дебец', 'девочка', 'действие', 'декоративноприкладной', 'декоративный', 'демонстрировать', 'деталь', 'детальный', 'деятельность', 'диаметральный', 'диастема', 'дикий', 'дикорастущий', 'диморфизм', 'динамика', 'дис.', 'дискуссия', 'дистальный', 'дифференцировать', 'длина', 'длинный', 'днепродонецкий', 'довольно', 'докл.', 'долго', 'должный', 'долина', 'долихокранный', 'доля', 'дом', 'домашний', 'доминировать', 'домостроительство', 'дополнительно', 'дополнительный', 'дополняться', 'допускать', 'допущение', 'доскональность', 'достаточно', 'достигать', 'достоверность', 'дотан', 'дотанный', 'др', 'др.', 'дра', 'древесина', 'древнеямный', 'древний', 'древность', 'друг', 'другой', 'дугообразный', 'думка', 'духовный', 'ева', 'евклидов', 'евразийский', 'евразия', 'европа', 'европейский', 'единица', 'единичный', 'единственный', 'единый', 'едиториал', 'екатеринбург', 'ереван', 'естественный', 'же', 'жевательный', 'желобчатый', 'женский', 'женщина', 'жетон', 'живой', 'животноводство', 'животное', 'жизнедательный', 'жизнеобеспечение', 'жизнь', 'жилище', 'житель', 'жобразный', 'забивать', 'забросить', 'завершать', 'завершаться', 'завершение', 'зависимость', 'завышать', 'задний', 'заканчиваться', 'закладывать', 'заключение', 'заключительный', 'закон', 'закрепление', 'закреплять', 'закрывать', 'заметно', 'заметный', 'замужний', 'занимать', 'занятие', 'западносибирский', 'западный', 'записывать', 'заполнение', 'заполярье', 'заставлять', 'застежка', 'затек', 'затекэмаль', 'затрагивать', 'затылок', 'зауралье', 'зафиксировать', 'зах', 'звейниека', 'звено', 'зданович', 'земледелие', 'земляной', 'зигзаг', 'зима', 'злак', 'знакомство', 'значение', 'значимость', 'значимый', 'значительно', 'значительный', 'зоваться', 'зооморфный', 'зрение', 'зуб', 'зубной', 'зубова', 'иаэ', 'иаэта', 'играть', 'идентичность', 'идея', 'идти', 'иерархический', 'известно', 'известный', 'изготовлять', 'издво', 'изделие', 'изменение', 'изменчивость', 'износ', 'изолированный', 'изучать', 'изучаться', 'изучение', 'ииа', 'илек', 'иллюстрация', 'именно', 'иметь', 'иметься', 'индивид', 'инородный', 'институт', 'интересовать', 'интерпретация', 'информативный', 'ипо0с', 'ирменский', 'исетский', 'исеть', 'искажать', 'исключать', 'исключение', 'искусство', 'исполь', 'использовать', 'использоваться', 'исследование', 'исследователь', 'исследовать', 'исток', 'историкокультурный', 'исторический', 'история', 'исходить', 'ица', 'иэриж', 'кабан', 'каждый', 'казарницкий', 'казаться', 'казахстан', 'какихлибо', 'какогото', 'какойлибо', 'какомулибо', 'калмыкия', 'калмыцкий', 'каменный', 'каннелюра', 'капсула', 'карабелль', 'карпологический', 'картина', 'касаться', 'катакомбник', 'катакомбный', 'категория', 'качество', 'кв', 'квадратичный', 'кемерово', 'керамика', 'керамический', 'киев', 'километр', 'киняминск', 'киняминский', 'кирюшин', 'классический', 'кластеризация', 'кластерный', 'клюев', 'кожаный', 'колбочка', 'коленный', 'колено', 'коленчатый', 'количественный', 'количество', 'коллекция', 'колоколовидный', 'колорит', 'кольцо', 'комплекс', 'композиция', 'компонент', 'кондукторов', 'конец', 'конкретизировать', 'констатировать', 'конструкция', 'контакт', 'контраргумент', 'конф', 'конфигурация', 'концентрироваться', 'концепция', 'координата', 'корень', 'корневище', 'коробка', 'корона', 'коронка', 'короткий', 'корректировать', 'коса', 'косарев', 'косвенный', 'косинцев', 'космогонический', 'косник', 'косоплетка', 'костный', 'кость', 'костюм', 'костюмный', 'костяк', 'котлован', 'который', 'кравцов', 'краевой', 'край', 'крайний', 'краниологический', 'краниология', 'краниометрический', 'крашеный', 'крепиться', 'крестовидный', 'крестовый', 'кривая', 'кривой', 'кровля', 'кроме', 'круг', 'круглый', 'крупный', 'круц', 'крыласов', 'кузьмин', 'культура', 'культурноисторический', 'культурный', 'культуролог', 'куроаракский', 'курья', 'лаборатория', 'ланджик', 'лапчатый', 'латеральный', 'лачиш', 'левый', 'лежать', 'леилан', 'лента', 'лесной', 'лесостепной', 'лесостепь', 'ликвидация', 'лингвальный', 'линия', 'липовый', 'лист', 'лит', 'литература', 'лицевой', 'лицо', 'лоб', 'лог', 'логичный', 'ложный', 'локализация', 'локальный', 'локтевой', 'лола', 'лолинский', 'лопатообразность', 'лопатообразный', 'лошадь', 'лук', 'лука', 'лукин', 'лукина', 'лунница', 'лунницы', 'луч', 'м14', 'м16', 'максимально', 'максимальный', 'маленький', 'малоазийский', 'малочисленность', 'малый', 'малютин', 'манипуляция', 'манси', 'маркер', 'масштаб', 'матвеев', 'материал', 'материально', 'материальный', 'материк', 'матуризация', 'маэ', 'маяк', 'меандр', 'меандровый', 'медиальный', 'меж', 'междуречье', 'межовский', 'мезо', 'мезокранный', 'мезолит', 'мезолитический', 'мезонеолитический', 'мезоринный', 'мелкий', 'менее', 'меньший', 'мера', 'место', 'метаконида', 'метаконулюс', 'металлический', 'метисный', 'метод', 'методика', 'методический', 'механизм', 'мешать', 'микроэволюционный', 'минимально', 'мир', 'мировоззренческий', 'мировой', 'мироустройство', 'михайлов', 'мнение', 'многий', 'многоотраслевой', 'могила', 'могильник', 'модель', 'мозговой', 'молодой', 'моляр', 'момент', 'монета', 'моргунов', 'морфологический', 'морфология', 'мочь', 'мочь.', 'муж', 'мужской', 'мужчина', 'мусулар', 'мы', 'мысль', 'наблюдать', 'наблюдаться', 'наблюдение', 'набор', 'наводить', 'нагорье', 'нагрудный', 'нагрузка', 'надежный', 'надпорожье', 'название', 'назион', 'назначение', 'называть', 'наиболее', 'накладка', 'накладка«рыбка', 'накладываться', 'накосник', 'накосный', 'наличие', 'намного', 'нанизывать', 'написать', 'направление', 'направленность.', 'направлять', 'например', 'народ', 'народный', 'наружный', 'нарушать', 'нарушение', 'наряду', 'население', 'наследие', 'настоящий', 'насчитывать', 'наука', 'науч.', 'научный', 'находить', 'находиться', 'находка', 'начало', 'наш', 'нашивать', 'нащечный', 'неблагоприятный', 'небольшой', 'невеста', 'невозможно', 'невозможный', 'невысокий', 'недифференцированный', 'недостаточный', 'нежели', 'незастроенный', 'неизвестный', 'некоторый', 'нельзя', 'немного', 'немой', 'ненарушенный', 'необычайно', 'неоднородность', 'неожиданно', 'неолит', 'неолитический', 'неопределенный', 'неопределимый', 'неопубликованный', 'неплохо', 'непосредственный', 'нерепрезентативный', 'несильный', 'несколько', 'несмотря', 'несомненно', 'нестратифицированный', 'нет', 'ниже', 'нижний', 'низкий', 'низко', 'низок', 'нитка', 'новик', 'новосибирск', 'новый', 'норма', 'нормальный', 'нос', 'носитель', 'носить', 'носовой', 'ношение', 'нулевой', 'оба', 'обвал', 'обитать', 'обл', 'обладать', 'область', 'облик', 'обломать', 'обломок', 'обнаруживать', 'обобщение', 'обозначать', 'оборот', 'обосновывать', 'образ', 'образец', 'образование', 'обращать', 'обряд', 'обрядность', 'обсуждение', 'обусловливать', 'общественный', 'общество', 'общий', 'община', 'общность', 'объект', 'объективный', 'объяснять', 'объясняться', 'обыденнов', 'обыденнова', 'обычно', 'ограничивать', 'ограничиваться', 'одежда', 'один', 'однако', 'одновременно', 'одновременный', 'однозначно', 'однородность', 'одонтологический', 'одонтология', 'одонтологы', 'оказываться', 'около', 'окончание', 'окончательно', 'окружающий', 'окружение', 'оленеостровский', 'олений', 'ольховка', 'он', 'они', 'оно', 'оперировать', 'описывать', 'определение', 'определенный', 'определимый', 'определять', 'определяться', 'опубликовывать', 'опыт', 'орбита', 'оренбургский', 'орищенко', 'орлов', 'орлова', 'орнамент', 'орнаментика', 'ортогнатный', 'ос', 'освоение', 'осложняться', 'основа', 'основание', 'основное', 'основной', 'особенность', 'особо', 'особый', 'осока', 'оспаривать', 'оставаться', 'оставлять', 'остальной', 'остаток', 'остеологический', 'остров', 'ось', 'от', 'отбирать', 'ответ', 'отграничивать', 'отдаваться', 'отдел', 'отдельный', 'откладываться', 'отклонение', 'открывать', 'открытый', 'отличать', 'отличаться', 'отличный', 'отмечать', 'отмечаться', 'относительно', 'относить', 'относиться', 'отношение', 'отпечаток', 'отражать', 'отражаться', 'отрасль', 'отрицательный', 'отсутствие', 'отсутствовать', 'оттискивать', 'отходить', 'отчетливо', 'отчетливость', 'отчетливый', 'оформление', 'оформляться', 'охватывать', 'охота', 'охраняться', 'оценивать', 'очаг', 'очевидно', 'очень', 'очередь', 'очерк', 'падать', 'палеоантропологический', 'палеоантропология', 'палеозоологический', 'памятник', 'память', 'панфилов', 'пар', 'пара', 'параллель', 'парной', 'парный', 'первоначально', 'первоначальный', 'первый', 'перебрасывание', 'переднеазиатский', 'передний', 'передняя', 'перекидываться', 'перекрывать', 'перемещать', 'перемычка', 'перемычкаобойма', 'перенести', 'переход', 'перечисленный', 'период', 'периодизация', 'пермь', 'перспектива', 'пищевой', 'план', 'планировка', 'пласт', 'платье', 'плечевой', 'плечо', 'плодовитость', 'плодородие', 'плоскостной', 'площадь', 'поверх', 'поверхность', 'поволжье', 'повседневный', 'повышать', 'повышение', 'повышенный', 'повязка', 'погр', 'погр.', 'погребальный', 'погребать', 'погребение', 'подбородок', 'подвергаться', 'подверженность', 'подвеска', 'подвескамиколбочка', 'подвескиколбочка', 'подвескилунница', 'подвесок', 'поддержание', 'поддержка', 'поднепровье', 'подобный', 'подол', 'подпрямоугольный', 'подразумевать', 'подробно', 'подросток', 'подтаежный', 'подтверждать', 'подход', 'подчеркивание', 'подчеркиваться', 'позволять', 'поздний', 'позолота', 'пока', 'показатель', 'показывать', 'покатый', 'покрывать', 'покрываться', 'пол', 'полагать', 'поле', 'полностью', 'полный', 'половина', 'половой', 'половый', 'положение', 'положительный', 'полоса', 'полоска', 'полуземлянка', 'получать', 'полый', 'польза', 'помещение', 'помогать', 'пониженный', 'попадать', 'попарно', 'попов', 'популяционный', 'популяция', 'пора', 'порядок', 'посвящать', 'поселение', 'поселок', 'посередине', 'поскольку', 'последний', 'послужить', 'пособие', 'поставлять', 'постановка', 'постоянный', 'постройка', 'постфедоровский', 'потомок', 'потревожить', 'появление', 'пояс', 'пояс»', 'поясной', 'пр', 'правильно', 'право', 'правомерный', 'правый', 'практически', 'превышать', 'предгорие', 'предел', 'предельно', 'предназначать', 'предоставлять', 'предполагаемый', 'предполагать', 'предположение', 'предположительно', 'предпочтение', 'представитель', 'представительность', 'представление', 'представлять', 'представляться', 'предшествовать', 'прежде', 'преимущественно', 'прекращать', 'премоляр', 'преобладание', 'преобладать', 'преобразовывать', 'препринт.', 'преувеличивать', 'приазовье', 'приближение', 'приблизительно', 'привеска', 'привесок', 'привлекать', 'приводить', 'приводиться', 'придавать', 'придерживаться', 'приднепровье', 'призма', 'признавать', 'признак', 'приисетский', 'приисетье', 'приисетья', 'прикамский', 'прикамье', 'прикаспий', 'прикрывать', 'приматываться', 'пример', 'примерно', 'принадлежать', 'принадлежность', 'приносить', 'принцип', 'приобья', 'приоритет', 'приплодный', 'присутствовать', 'приходиться', 'причем', 'прическа', 'причислять', 'проанализировать', 'пробел', 'проблема', 'проведение', 'проверка', 'проводить', 'проводиться', 'провоцировать', 'программа', 'продолжать', 'продолжительность', 'продольный', 'продуктивный', 'производить', 'производиться', 'происходить', 'происхождение', 'промежуток', 'пронизь', 'пропорция', 'прорезь', 'прослеживаться', 'просматриваться', 'просто', 'пространственный', 'пространство', 'просуществовать', 'протекание', 'противоположный', 'противопоставление', 'протоевропейский', 'протостилид', 'протяжение', 'профилировка', 'проходить', 'процветание', 'процент', 'процесс', 'прочий', 'проявлять', 'проявляться', 'прямо', 'прямой', 'публикация', 'путь', 'пшеница', 'пятибугорковый', 'пять', 'работа', 'равнина', 'равный', 'радикально', 'радиоуглеродный', 'раз', 'разбрасывать', 'разведение', 'развитие', 'развитый', 'разграничительный', 'разделение', 'разделять', 'различаться', 'различие', 'различный', 'размер', 'размещать', 'размещение', 'разница', 'разновидность', 'разновременный', 'разный', 'разрушать', 'разрыв', 'район', 'рамка', 'ран', 'ранний', 'рано', 'раппорт', 'раскопка', 'расоводиагностический', 'расогенез', 'расообразование', 'располагаться', 'расположение', 'распределение', 'распространение', 'распространенный', 'распускаться', 'рассматривать', 'рассматриваться', 'рассмотрение', 'расстояние', 'рассыпать', 'растение', 'растительность', 'растительный', 'расхождение', 'расшитый', 'рафайлово', 'рдест', 'реализация', 'ребенок', 'ребро', 'регион', 'регулярный', 'редукционный', 'редукция', 'редуцированный', 'резец', 'резкий', 'резко', 'резной', 'результат', 'реконструировать', 'реконструироваться', 'реконструкция', 'реликтовый', 'рельеф', 'ремень', 'рис', 'рис.', 'рисунок', 'ритуал', 'ритуальный', 'рифление', 'рн', 'ровный', 'рогатый', 'род', 'родство', 'роль', 'романов', 'ромб', 'росс', 'рука', 'русский', 'рффи', 'рыбка', 'рыболовство', 'ряд', 'рядом', 'са', 'сак', 'сакральный', 'сальник', 'сальников', 'сам', 'самодиец', 'самый', 'сапаллидеп', 'сапаллитеп', 'саргаринский', 'сближаться', 'сближение', 'свадьба', 'сведение', 'свердловск', 'свет', 'свидетельство', 'свидетельствовать', 'свинья', 'свисать', 'свита', 'сводить', 'своеобразный', 'свой', 'свойственный', 'связанный', 'связывать', 'связываться', 'связь', 'священный', 'сделать', 'себя', 'север', 'северный', 'североевропейский', 'северозапад', 'северозападный', 'североказахстанский', 'сегед', 'сей', 'селище', 'семенов', 'семя', 'серебряный', 'середина', 'серия', 'серый.', 'серьезный', 'сибирский', 'сибирь', 'сидоров', 'сила', 'сильно', 'сильный', 'симметрично', 'симметричный', 'симметрия', 'синхронный', 'система', 'систематика', 'ситуация', 'сказать', 'сквозь', 'складка', 'складываться', 'скольконибудь', 'скоро', 'скорость', 'скот', 'скотовод', 'скотоводство', 'скотоводческий', 'скотт', 'слабо', 'славянин', 'слева', 'слегка', 'след', 'следовать', 'слишком', 'словарь', 'сложность', 'сложный', 'слой', 'служить', 'случай', 'см', 'смерть', 'смешанность', 'смысл', 'снашивание', 'собирать', 'собранный', 'собственный', 'совокупность', 'совпадение', 'современный', 'согласно', 'согласоваться', 'содержаться', 'соединять', 'соединяться', 'создавать', 'солнечный', 'сооружение', 'соответственно', 'соответственный', 'соответствие', 'соответствовать', 'соответствующий', 'соотносить', 'соотношение', 'сопоставление', 'сопоставлять', 'сопредельный', 'сопровождаться', 'сосед', 'состав', 'составлять', 'сосуд', 'сотрудник', 'сохранность', 'сохранять', 'сохраняться', 'социальный', 'сочетание', 'сочетаться', 'спать', 'спб.', 'спектр', 'специфика', 'специфический', 'специфичность', 'спиральный', 'список', 'сплошь', 'способ', 'способный', 'справа', 'справедливо', 'сравнение', 'сравнивать', 'сравнительно', 'сравнительный', 'среда', 'среди', 'среднеазиатский', 'средневековый', 'средневековье', 'средневысокий', 'среднее', 'среднеевропейский', 'среднестоговский', 'среднеширокий', 'средний', 'ссср', 'стабильность', 'ставрополье', 'ставропольский', 'стадо', 'стандартный', 'становиться', 'статистически', 'статистический', 'статус', 'статья', 'ствол', 'стебель', 'стенка', 'степень', 'степной', 'степь', 'столь', 'сторона', 'сторонник', 'стратиграфия', 'стресс', 'строение', 'структура', 'су', 'субдостоверный', 'субстрат', 'субъект', 'судя', 'сумма', 'суммарно*', 'суммарный', 'сургутский', 'сустав', 'существенный', 'существование', 'существовать', 'сфера', 'сформировывать', 'сходство', 'считать', 'считаться', 'табла', 'табла.', 'таблица', 'тавшийся', 'тазобедренный', 'тазовый', 'также', 'такой', 'таксономический', 'тгу', 'тез', 'телль', 'телльэдувейра', 'температура', 'тенденция', 'термин', 'тернер', 'территория', 'тесьма', 'тип', 'типологический', 'тиэ', 'ткань', 'тобол', 'толковый', 'том', 'томск', 'тонкий', 'тот', 'точка', 'точно', 'традиционный', 'традиция', 'трактовка', 'транслироваться', 'трансформация', 'траур', 'третий', 'треугольник', 'трехбусинный', 'три', 'тригонид', 'тригонометрически', 'триполец', 'трипольский', 'тронуть', 'трубочка', 'трубчатый', 'трудно', 'туркменистан', 'туркмения', 'тщательный', 'тыс', 'тыс.', 'тысяча', 'тюм', 'тюменский', 'тюмень', 'тяготение', 'убор', 'углубленный', 'угол', 'угр', 'удаваться', 'удельный', 'удовлетворять', 'узенький', 'узкий', 'узор', 'указанный', 'уклад', 'укладываться', 'украина', 'украинский', 'украшать', 'украшение', 'умеренно', 'умеренный', 'универсальный', 'унт', 'урал', 'уралоиртышский', 'уральский', 'уро', 'уровень', 'урсс', 'усибирский', 'усилие', 'условие', 'условно', 'устанавливать', 'установленный', 'устойчивость', 'устойчивый', 'устьбалык', 'утверждать', 'утверждение', 'утилитарный', 'утрата', 'утрачивать', 'участок', 'ученый', 'учитывать', 'учитываться', 'уязвимый', 'факт', 'фактор', 'фаунистический', 'федоровский', 'федоровцев', 'фен', 'флуктуирующий', 'фольклор', 'форма', 'формальный', 'формирование', 'формироваться', 'фрагмент', 'фундаментальный', 'функционировать', 'функция', 'халдеев', 'хант', 'ханты', 'хантыйский', 'характер', 'характер.', 'характеризовать', 'характеризоваться', 'характеристика', 'характерный', 'хвалынский', 'хвоя', 'хлев', 'хлобыстин', 'хлобыстина', 'ход', 'хозяйственнофункциональный', 'хозяйственный', 'хозяйство', 'хозяйство”', 'холм', 'холод', 'хотя', 'хохлов', 'хронологически', 'хронологический', 'хронология', 'худавердяный', 'цвет', 'целое', 'целый', 'цель', 'ценность', 'центр', 'цепочка', 'цепь', 'цилиндрический', 'частично', 'часто', 'частота', 'часть', 'чатать', 'чатывать', 'человеческий', 'человечество', 'челюсть', 'челябинск', 'чепец', 'череп', 'черепной', 'черепок', 'черкаскулец', 'черкаскульский', 'черкаскульскомежовский', 'черкаскульскомежовской', 'черный', 'черта', 'четыре', 'четырехбугорковый', 'численность', 'число', 'чистка', 'чистый', 'чограй', 'чохто', 'чухт', 'шаманизм', 'шевченко', 'шейнонагрудный', 'шейный', 'шестибугорковый', 'шесть', 'ширина', 'широкий', 'широтный', 'шнур', 'шнурок', 'шорин', 'шуметь', 'щека', 'ществовать', 'щиток', 'эволюционный', 'экз', 'экзогамность', 'экология', 'экономика', 'эксперимент', 'элемент', 'эмаль', 'энеолит', 'эпоха', 'эпохальный', 'эротика', 'эстетический', 'этап', 'этнический', 'этногенез', 'этнографический', 'этнография', 'этноонлайн', 'это', 'этот', 'юг', 'юган', 'юганский', 'юговосточный', 'югозападный', 'южнорусский', 'южный', 'юрта', 'яблонский', 'являться', 'явно', 'язык', 'ямник', 'ямный', 'яркий', 'ярко', 'ячмень']

    lexicon_len = len(lexicon)
    print(lexicon_len)  # 1677
    # For different lemmatizers we got following lexicon:
    # MyStem (made in Yandex Russia) - 1677
    # morph (made in Russia) - 1677
    # nltk - 2650

    corpus_tfidf_vectors = getCorpusTfIdfVectors(docs_tokens, lexicon)

    arch1Vectors = corpus_tfidf_vectors[0]
    arch2Vectors = corpus_tfidf_vectors[1]
    arch3Vectors = corpus_tfidf_vectors[2]

    arch0Vectors = getDocumentTfIdfVectors(bagOfWordsArch0, lexicon)
    hist1Vectors = getDocumentTfIdfVectors(bagOfWordsHist1, lexicon)
    med1Vectors = getDocumentTfIdfVectors(bagOfWordsMed1, lexicon)
    med2Vectors = getDocumentTfIdfVectors(bagOfWordsMed2, lexicon)
    geo1Vectors = getDocumentTfIdfVectors(bagOfWordsGeo1, lexicon)

    print("Cosine similarity (Otiai coefficient) between arch0 and arch1 vectors  = {}".format(
        compareTfIdfVectors(arch0Vectors, arch1Vectors)))
    print("Cosine similarity (Otiai coefficient) between arch0 and arch2 vectors  = {}".format(
        compareTfIdfVectors(arch0Vectors, arch2Vectors)))
    print("Cosine similarity (Otiai coefficient) between arch0 and arch3 vectors  = {}".format(
        compareTfIdfVectors(arch0Vectors, arch3Vectors)))

    print("Cosine similarity (Otiai coefficient) between hist1 and arch1 vectors  = {}".format(
        compareTfIdfVectors(hist1Vectors, arch1Vectors)))
    print("Cosine similarity (Otiai coefficient) between hist1 and arch2 vectors  = {}".format(
        compareTfIdfVectors(hist1Vectors, arch2Vectors)))
    print("Cosine similarity (Otiai coefficient) between hist1 and arch3 vectors  = {}".format(
        compareTfIdfVectors(hist1Vectors, arch3Vectors)))

    print("Cosine similarity (Otiai coefficient) between geo1Vectors and arch1 vectors  = {}".format(
        compareTfIdfVectors(geo1Vectors, arch1Vectors)))
    print("Cosine similarity (Otiai coefficient) between geo1Vectors and arch2 vectors  = {}".format(
        compareTfIdfVectors(geo1Vectors, arch2Vectors)))
    print("Cosine similarity (Otiai coefficient) between geo1Vectors and arch3 vectors  = {}".format(
        compareTfIdfVectors(geo1Vectors, arch3Vectors)))

    print("Cosine similarity (Otiai coefficient) between med1Vectors and arch1 vectors  = {}".format(
        compareTfIdfVectors(med1Vectors, arch1Vectors)))
    print("Cosine similarity (Otiai coefficient) between med1Vectors and arch2 vectors  = {}".format(
        compareTfIdfVectors(med1Vectors, arch2Vectors)))
    print("Cosine similarity (Otiai coefficient) between med1Vectors and arch3 vectors  = {}".format(
        compareTfIdfVectors(med1Vectors, arch3Vectors)))

    print("Cosine similarity (Otiai coefficient) between med2Vectors and arch1 vectors  = {}".format(
        compareTfIdfVectors(med2Vectors, arch1Vectors)))
    print("Cosine similarity (Otiai coefficient) between med2Vectors and arch2 vectors  = {}".format(
        compareTfIdfVectors(med2Vectors, arch2Vectors)))
    print("Cosine similarity (Otiai coefficient) between med2Vectors and arch3 vectors  = {}".format(
        compareTfIdfVectors(med2Vectors, arch3Vectors)))

    # Cosine similarity (Otiai coefficient) between arch0 and arch1 vectors  = 0.05506429291506663
    # Cosine similarity (Otiai coefficient) between arch0 and arch2 vectors  = 0.05902935782018004
    # Cosine similarity (Otiai coefficient) between arch0 and arch3 vectors  = 0.28737174791241865
    # Cosine similarity (Otiai coefficient) between hist1 and arch1 vectors  = 0.08238702499244395
    # Cosine similarity (Otiai coefficient) between hist1 and arch2 vectors  = 0.10863829978064551
    # Cosine similarity (Otiai coefficient) between hist1 and arch3 vectors  = 0.12908636614144392
    # Cosine similarity (Otiai coefficient) between geo1Vectors and arch1 vectors  = 0.035912539314113125
    # Cosine similarity (Otiai coefficient) between geo1Vectors and arch2 vectors  = 0.05084926229266782
    # Cosine similarity (Otiai coefficient) between geo1Vectors and arch3 vectors  = 0.0846791680935364
    # Cosine similarity (Otiai coefficient) between medicine1Vectors and arch1 vectors  = 0.04890525275234805
    # Cosine similarity (Otiai coefficient) between medicine1Vectors and arch2 vectors  = 0.08986597735316909
    # Cosine similarity (Otiai coefficient) between medicine1Vectors and arch3 vectors  = 0.04863263688788668
    # Cosine similarity (Otiai coefficient) between medicine2Vectors and arch1 vectors  = 0.0205634754185599
    # Cosine similarity (Otiai coefficient) between medicine2Vectors and arch2 vectors  = 0.11968332995320478
    # Cosine similarity (Otiai coefficient) between medicine2Vectors and arch3 vectors  = 0.07291692616961012

    # Conclusions:
    # 1) We see that cosine similarity (Otiai coefficient) between arch0 and arch3 vectors is a maximun and equals 0.28737174791241865.
    # 2) Documentds from medicine or geological fields do not have such cosine similarity with archaeological texts
    # and it locates in general between 0.0205634754185599 and 0.0846791680935364
    # 3) Documents from historical and archaeological fiels have rather close cosine similaritis between 0.08238702499244395 and 0.12908636614144392
    # I think that is the reason why these fields are located in one chapter "History and archaeology" on https://cyberleninka.ru/article/c/history-and-archaeology
    # 4) Most effective NLP pipeline was made both with russian made lemmatizers MyStem from Yandex and morph.